# Vaca - Visual Application Components Abstraction	-*- Makefile -*-
# Copyright (c) 2005-2009 David Capello
# All rights reserved.

default: all

# ----------------------------------------------------------------------
# Extensions
# ----------------------------------------------------------------------

_OBJ = .obj
_LIB = .lib
_DLL = .dll
_EXE = .exe
_RES = .res

# ----------------------------------------------------------------------
# Programs
# ----------------------------------------------------------------------

AR	= lib -NOLOGO
CPP	= cl -nologo
LINK	= link -NOLOGO
RM	= "./gnumake/rm.exe"
CP	= "./gnumake/cp.exe"
MV	= "./gnumake/mv.exe"
RMDIR	= rmdir
MKDIR	= mkdir
WINDRES = rc

# ----------------------------------------------------------------------
# Common
# ----------------------------------------------------------------------

include Makefile.common

# ----------------------------------------------------------------------
# Flags
# ----------------------------------------------------------------------

CPPFLAGS += -wd4355 -wd4996 -Ob1 -EHa
LIBS += User32.lib Shell32.lib ComCtl32.lib ComDlg32.lib Gdi32.lib	\
        Msimg32.lib WinMM.lib AdvAPI32.lib Ole32.lib ShLwApi.lib	\
        Vfw32.Lib WinInet.lib
EXE_LIBS += $(LIBS)

# ----------------------------------------------------------------------
# PROFILE?
# ----------------------------------------------------------------------

ifdef PROFILE
   CPPFLAGS += /GL /O2
   DLLFLAGS += /LTCG
   LFLAGS   += /LTCG
endif

# ----------------------------------------------------------------------
# DEBUG
# ----------------------------------------------------------------------

ifdef DEBUG
  CPPFLAGS += -Zi
  DLLFLAGS += -DEBUG
  LFLAGS   += -DEBUG

  ifdef STATIC_LIBC
    CPPFLAGS += -MTd
  else
    CPPFLAGS += -MDd
  endif
else
  ifdef STATIC_LIBC
    CPPFLAGS += -MT
  else
    CPPFLAGS += -MD
  endif
endif

# ----------------------------------------------------------------------
# RELEASE (optimized)
# ----------------------------------------------------------------------

ifdef RELEASE
  CPPFLAGS += -O2
  DLLFLAGS += -RELEASE
  LFLAGS   += -RELEASE
endif

# ----------------------------------------------------------------------
# Memory leak detector
# ----------------------------------------------------------------------

ifdef MEMORY_LEAK_DETECTOR
#   VACA_LIB_FLAGS += -D_DEBUG
#   VACA_EXE_FLAGS += -D_DEBUG
  CPPFLAGS += -Ithird_party/nvwa -DMEMORY_LEAK_DETECTOR
#   LFLAGS += -g
#   DLLFLAGS += -g
  LIB_SOURCES += $(basename $(notdir $(wildcard third_party/nvwa/*.cpp)))
endif

# ----------------------------------------------------------------------
# Files
# ----------------------------------------------------------------------

VACA_LIB = lib/Vaca$(SUFFIX)$(_LIB)
VACA_DLL = bin/Vaca$(SUFFIX)$(_DLL)

LIB_OBJS = $(addprefix obj/Library., $(addsuffix $(SUFFIX)$(_OBJ), $(LIB_SOURCES)))
EXAMPLES_EXE = $(addprefix bin/Example., $(addsuffix $(SUFFIX)$(_EXE), $(EXAMPLES)))
TESTS_EXE = $(addprefix bin/Test., $(addsuffix $(SUFFIX)$(_EXE), $(TESTS)))

EXAMPLES_DIRS_WITH_RC = $(dir $(wildcard examples/*/*.rc))

# ----------------------------------------------------------------------
# Generic Rules
# ----------------------------------------------------------------------

vpath %.cpp $(addprefix examples/, $(EXAMPLES)) tests
vpath %.rc $(EXAMPLES_DIRS_WITH_RC)

obj/Library.%$(SUFFIX)$(_OBJ): src/%.cpp
	$(CPP) $(CPPFLAGS) $(VACA_LIB_FLAGS) -Fo$@ -c $<

obj/Library.%$(SUFFIX)$(_OBJ): third_party/nvwa/%.cpp
	$(CPP) $(CPPFLAGS) $(VACA_LIB_FLAGS) -Fo$@ -c $<

obj/Example.%$(SUFFIX)$(_OBJ): %.cpp
	$(CPP) $(CPPFLAGS) $(VACA_EXE_FLAGS) -Fo$@ -c $<

obj/Example$(SUFFIX)$(_RES): examples/Example.rc
	$(WINDRES) $<
	$(MV) examples/Example$(_RES) $@

obj/Example.%$(SUFFIX)$(_RES): %.rc
	$(WINDRES) $<
	$(MV) $(basename $<)$(_RES) $@

obj/Test.%$(SUFFIX)$(_OBJ): tests/%.cpp
	$(CPP) $(CPPFLAGS) $(VACA_EXE_FLAGS) -Fo$@ -c $<

# %.h.gch: %.h
# 	$(CPP) $(CPPFLAGS) -o $@ -c $<

ifdef STATIC
$(VACA_LIB): $(LIB_OBJS)
	$(AR) -OUT:$@ $^
else
$(VACA_LIB): $(VACA_DLL)

$(VACA_DLL): $(LIB_OBJS)
	$(RM) -f $@
	$(LINK) $(DLLFLAGS) -DLL -IMPLIB:$(VACA_LIB) $(LIB_OBJS) $(LIBS) -OUT:$(VACA_DLL)
endif

# examples

bin/Example.%$(SUFFIX)$(_EXE): obj/Example.%$(SUFFIX)$(_OBJ) $(VACA_LIB)
	$(LINK) $(LFLAGS) -SUBSYSTEM:WINDOWS -MACHINE:X86 -OUT:$@ $^ $(EXE_LIBS)
	mt.exe -nologo -manifest examples/Example.manifest $@.manifest "-outputresource:$@;1"
	$(RM) $@.manifest

# tests

bin/Test.%$(SUFFIX)$(_EXE): obj/Test.%$(SUFFIX)$(_OBJ) $(VACA_LIB)
	$(LINK) $(LFLAGS) -SUBSYSTEM:CONSOLE -MACHINE:X86 -OUT:$@ $^ $(EXE_LIBS)

# ----------------------------------------------------------------------
# Rules
# ----------------------------------------------------------------------

all: lib examples tests

ifdef STATIC
lib: $(VACA_LIB)
else
ifdef STATIC_LIBC
error:
	@echo You cannot compile Vaca DLL using the static C runtime of MSVC.
	@exit 1
lib: error
else
lib: $(VACA_DLL)
endif
endif

examples: lib $(EXAMPLES_EXE)

tests: lib $(TESTS_EXE)

runtests: tests
	@for file in bin/test_*.exe ; do \
		echo Running ./$$file ... ; \
		if ./$$file ; then \
			echo " - OK" ; \
		else \
			echo " - *FAIL*" ; \
		fi ; \
	done

clean:
	-$(RM) -f $(wildcard bin/*.ilk bin/*.pdb obj/*.res obj/*.o obj/*.obj)

cleanobj:
	-$(RM) -f $(LIB_OBJS)

distclean: clean
	-$(RM) -f $(wildcard bin/Vaca*.dll bin/*.exe bin/*.manifest lib/*.a lib/*.lib lib/*.exp bin/vaca.log)

ifdef VCINSTALLDIR
install: lib
	-$(MKDIR) "$(VCINSTALLDIR)/include/Vaca"
	$(CP) $(wildcard include/Vaca/*.h) "$(VCINSTALLDIR)/include/Vaca"
	$(CP) $(VACA_LIB) "$(VCINSTALLDIR)/lib"

uninstall:
	-$(RM) "$(VCINSTALLDIR)/$(VACA_LIB)"
	-$(RM) -fr "$(VCINSTALLDIR)/include/Vaca"
else
install:
	@echo You must to setup your VCINSTALLDIR enviroment variable

uninstall:
	@echo You must to setup your VCINSTALLDIR enviroment variable
endif
