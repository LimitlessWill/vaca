# Vaca - Visual Application Components Abstraction	-*- Makefile -*-
# Copyright (c) 2005-2009 David Capello
# All rights reserved.

default: all

# ----------------------------------------------------------------------
# Extensions
# ----------------------------------------------------------------------

_OBJ = .o
_LIB = .a
_DLL = .dll
_EXE = .exe
_RES = .res

# ----------------------------------------------------------------------
# Programs
# ----------------------------------------------------------------------

AR	= ar
CPP	= g++
RM	= rm
CP	= cp
RMDIR	= rmdir
MKDIR	= mkdir
WINDRES = windres

# ----------------------------------------------------------------------
# Common
# ----------------------------------------------------------------------

include Makefile.common

# ----------------------------------------------------------------------
# Flags
# ----------------------------------------------------------------------

CPPFLAGS += -W -Wall -Wno-unused
LFLAGS += -mwindows -Lobj
LIBS += -lkernel32 -luser32 -lgdi32 -lcomdlg32 -lwinspool	\
	-lwinmm -lshell32 -lshlwapi -lcomctl32 -lole32		\
	-loleaut32 -luuid -lrpcrt4 -ladvapi32 -lwsock32		\
	-lodbc32 -lcomctl32 -lsecur32 -lmsimg32 -lwininet	\
	-lvfw32
EXE_LIBS += $(LIBS)

# ----------------------------------------------------------------------
# PROFILE?
# ----------------------------------------------------------------------

ifdef PROFILE
  CPPFLAGS += -pg
  DLLFLAGS += -pg
  LFLAGS   += -pg
endif

# ----------------------------------------------------------------------
# DEBUG
# ----------------------------------------------------------------------

ifdef DEBUG
  CPPFLAGS += -g
  DLLFLAGS += -g
  LFLAGS   += -g
else
  CPPFLAGS += -s
  DLLFLAGS += -s
  LFLAGS   += -s
endif

# ----------------------------------------------------------------------
# RELEASE (optimized)
# ----------------------------------------------------------------------

ifdef RELEASE
  CPPFLAGS += -O3
  DLLFLAGS += -O3
  LFLAGS   += -O3
endif

# ----------------------------------------------------------------------
# Memory leak detector
# ----------------------------------------------------------------------

ifdef MEMORY_LEAK_DETECTOR
#   VACA_LIB_FLAGS += -D_DEBUG
#   VACA_EXE_FLAGS += -D_DEBUG
  CPPFLAGS += -Ithird_party/nvwa -DMEMORY_LEAK_DETECTOR
#   LFLAGS += -g
#   DLLFLAGS += -g
  LIB_SOURCES += $(basename $(notdir $(wildcard third_party/nvwa/*.cpp)))
endif

# ----------------------------------------------------------------------
# Files
# ----------------------------------------------------------------------

VACA_LIB = lib/libvaca$(SUFFIX)$(_LIB)
VACA_DLL = bin/Vaca$(SUFFIX)$(_DLL)

LIB_OBJS = $(addprefix obj/Library., $(addsuffix $(SUFFIX)$(_OBJ), $(LIB_SOURCES)))
EXAMPLES_EXE = $(addprefix bin/Example., $(addsuffix $(SUFFIX)$(_EXE), $(EXAMPLES)))
TESTS_EXE = $(addprefix bin/Test., $(addsuffix $(SUFFIX)$(_EXE), $(TESTS)))

EXAMPLES_DIRS_WITH_RC = $(dir $(wildcard examples/*/*.rc))

# ----------------------------------------------------------------------
# Generic Rules
# ----------------------------------------------------------------------

vpath %.cpp $(addprefix examples/, $(EXAMPLES)) tests
vpath %.rc $(EXAMPLES_DIRS_WITH_RC)

obj/Library.%$(SUFFIX)$(_OBJ): src/%.cpp
	$(CPP) $(CPPFLAGS) $(VACA_LIB_FLAGS) -o $@ -c $<

obj/Library.%$(SUFFIX)$(_OBJ): third_party/nvwa/%.cpp
	$(CPP) $(CPPFLAGS) $(VACA_LIB_FLAGS) -o $@ -c $<

obj/Example.%$(SUFFIX)$(_OBJ): %.cpp
	$(CPP) $(CPPFLAGS) $(VACA_EXE_FLAGS) -o $@ -c $<

obj/Example$(SUFFIX)$(_RES): examples/Example.rc
	$(WINDRES) -Iexamples/ -O coff -o $@ -i $<

obj/Example.%$(SUFFIX)$(_RES): %.rc
	$(WINDRES) $(addprefix -I, $(EXAMPLES_DIRS_WITH_RC)) -O coff -o $@ -i $<

obj/Test.%$(SUFFIX)$(_OBJ): tests/%.cpp
	$(CPP) $(CPPFLAGS) $(VACA_EXE_FLAGS) -o $@ -c $<

# %.h.gch: %.h
# 	$(CPP) $(CPPFLAGS) -o $@ -c $<

ifdef STATIC
$(VACA_LIB): $(LIB_OBJS)
	$(RM) -f $@
	$(AR) crs $(VACA_LIB) $(LIB_OBJS)
else
$(VACA_LIB): $(VACA_DLL)

$(VACA_DLL): $(LIB_OBJS)
	$(RM) -f $@
	$(CPP) $(DLLFLAGS) -shared -fPIC -o $(VACA_DLL) $(LIB_OBJS) -Wl,--out-implib,$(VACA_LIB) $(LIBS)
endif

# examples

bin/Example.%$(SUFFIX)$(_EXE): obj/Example.%$(SUFFIX)$(_OBJ) $(VACA_LIB)
	$(CPP) $(LFLAGS) -o $@ $^ $(EXE_LIBS) 

# tests

bin/Test.%$(SUFFIX)$(_EXE): obj/Test.%$(SUFFIX)$(_OBJ) $(VACA_LIB)
	$(CPP) $(LFLAGS) -mconsole -o $@ $^ $(EXE_LIBS)

# ----------------------------------------------------------------------
# Rules
# ----------------------------------------------------------------------

all: lib examples tests

ifdef STATIC
lib: $(VACA_LIB)
else
lib: $(VACA_DLL)
endif

examples: $(EXAMPLES_EXE)

tests: $(TESTS_EXE)

runtests: tests
	@for file in bin/test_*.exe ; do \
		echo Running ./$$file ... ; \
		if ./$$file ; then \
			echo " - OK" ; \
		else \
			echo " - *FAIL*" ; \
		fi ; \
	done

deps:
	$(CPP) -MM $(CPPFLAGS)        src/*.cpp | sed -e 's|^\([A-Za-z_0-9]\+\)\.o|obj/Library.\1\$$\(SUFFIX\)$$\(_OBJ\)|' > .deps
	$(CPP) -MM $(CPPFLAGS) examples/*/*.cpp | sed -e 's|^\([A-Za-z_0-9]\+\)\.o|obj/Example.\1\$$\(SUFFIX\)$$\(_OBJ\)|' >> .deps
	$(CPP) -MM $(CPPFLAGS)      tests/*.cpp | sed -e 's|^\([A-Za-z_0-9]\+\)\.o|obj/Test.\1\$$\(SUFFIX\)$$\(_OBJ\)|' >> .deps

clean:
	-$(RM) -f $(wildcard bin/*.ilk bin/*.pdb obj/*.res obj/*.o obj/*.obj)

cleanobj:
	-$(RM) -f $(LIB_OBJS)

distclean: clean
	-$(RM) -f $(wildcard bin/Vaca*.dll bin/*.exe bin/*.manifest lib/*.a lib/*.lib lib/*.exp bin/vaca.log)

ifdef MINGW_ROOT
install: lib
	-$(MKDIR) $(MINGW_ROOT)/include/Vaca
	$(CP) $(wildcard include/Vaca/*.h) $(MINGW_ROOT)/include/Vaca
	$(CP) $(VACA_LIB) $(MINGW_ROOT)/lib

uninstall:
	-$(RM) $(MINGW_ROOT)/$(VACA_LIB)
	-$(RM) -fr $(MINGW_ROOT)/include/Vaca
else
install:
	@echo You must to setup your MINGW_ROOT enviroment variable

uninstall:
	@echo You must to setup your MINGW_ROOT enviroment variable
endif

# ----------------------------------------------------------------------
# Dependencies

-include .deps
